// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.2
// - protoc             v3.17.3
// source: erp.proto

package erp

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"
	common "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// MaterialServiceClient is the client API for MaterialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaterialServiceClient interface {
	GetMeterial(ctx context.Context, in *GetMeterialRequest, opts ...grpc_go.CallOption) (*GetMeterialResponse, common.ErrorWithAttachment)
}

type materialServiceClient struct {
	cc *triple.TripleConn
}

type MaterialServiceClientImpl struct {
	GetMeterial func(ctx context.Context, in *GetMeterialRequest) (*GetMeterialResponse, error)
}

func (c *MaterialServiceClientImpl) GetDubboStub(cc *triple.TripleConn) MaterialServiceClient {
	return NewMaterialServiceClient(cc)
}

func NewMaterialServiceClient(cc *triple.TripleConn) MaterialServiceClient {
	return &materialServiceClient{cc}
}

func (c *materialServiceClient) GetMeterial(ctx context.Context, in *GetMeterialRequest, opts ...grpc_go.CallOption) (*GetMeterialResponse, common.ErrorWithAttachment) {
	out := new(GetMeterialResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetMeterial", in, out)
}

// MaterialServiceServer is the server API for MaterialService service.
// All implementations must embed UnimplementedMaterialServiceServer
// for forward compatibility
type MaterialServiceServer interface {
	GetMeterial(context.Context, *GetMeterialRequest) (*GetMeterialResponse, error)
	mustEmbedUnimplementedMaterialServiceServer()
}

// UnimplementedMaterialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaterialServiceServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedMaterialServiceServer) GetMeterial(context.Context, *GetMeterialRequest) (*GetMeterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeterial not implemented")
}
func (s *UnimplementedMaterialServiceServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedMaterialServiceServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedMaterialServiceServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &MaterialService_ServiceDesc
}
func (UnimplementedMaterialServiceServer) mustEmbedUnimplementedMaterialServiceServer() {}

// UnsafeMaterialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterialServiceServer will
// result in compilation errors.
type UnsafeMaterialServiceServer interface {
	mustEmbedUnimplementedMaterialServiceServer()
}

func RegisterMaterialServiceServer(s grpc_go.ServiceRegistrar, srv MaterialServiceServer) {
	s.RegisterService(&MaterialService_ServiceDesc, srv)
}

func _MaterialService_GetMeterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetMeterial", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// MaterialService_ServiceDesc is the grpc_go.ServiceDesc for MaterialService service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterialService_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "proto.erp.MaterialService",
	HandlerType: (*MaterialServiceServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "GetMeterial",
			Handler:    _MaterialService_GetMeterial_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "erp.proto",
}
